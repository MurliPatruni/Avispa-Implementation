%%% Start of protocol
role edge (ED, NAD: agent, SKus: symmetric_key, SND,RCV: channel(dy))  
played_by ED
def=
	local
		State:nat,
		IDu, PWu, Bu, Aa, Cu, M,AB, TW: text,
		Lu, Xu, Yu, Fu, Zu, PIDr, Bbprime, Du: text,
		Buj, IDj, Quj, PIDrprime, Qujprime, Dj, Tu, SKuj,Ss, DIDu: text,
		H: hash_func
	const
		sp1,sp2, sp3, a, b, bprime, dj, cu	: protocol_id
	init
		State := 0
	transition
	1. State = 0  /\  RCV(start) =|> 
        State' := 1  /\  M' := H(IDu.Bu) 
	/\ Aa' := new()
	/\ TW' := H(xor(Aa,H(Bu.PWu)))
%%%% Identity is Shared BETWEEN ED and NAD
	/\  secret({IDu}, sp1, {ED,NAD})
%%%%Password and Biometric  are only know to ED
	/\  secret({PWu,Bu}, sp2, {ED})
%%%%Send Registration Request to NAD
	/\  SND({IDu.M'.TW'}_SKus)
%%%% Receive Registration Reply to NAD
	2. State=1 /\ RCV({PIDr'.Du.Yu.Fu.Zu}_SKus) =|>  
%%%% Master key s is only known to NAD
	State' := 3 /\  secret({Ss}, sp3, {NAD})
%%%% Authentication and Key Exchange Phase (Public Channel)
	/\ Fu' := H(IDu.TW)
	/\ Cu' :=  new() 
%%%% Here we assume that H(IDu.Ss)= AB'
	/\  AB' := xor(Du, H(IDu.TW))
	/\ Buj'  := xor(xor(xor(Zu,H(IDj.Cu')),TW),H(PIDr'.H(IDu.Ss)))
	/\ Xu' := xor(Yu, H(M.TW))
	/\ DIDu' := H(PIDr'.Xu.Cu')
%%% Send login request message M1 to NAD 
	/\ SND(PIDr'.DIDu'.Buj'.Cu')
%%% U has freshly generated random number
	/\ witness(ED, NAD, cu, Cu')
%%% Receive Authentication message from NAD
	3. State=3 /\ RCV(Quj. Tu. Dj	) =|> 
	State' := 5 /\  Dj' := new() /\ PIDr' := new() 
	/\ Quj' := H(H(IDu.Ss).Tu.Cu.Dj.Xu.IDj)
	/\ SKuj' := H(H(IDu.Ss). Cu. Dj. Xu. IDj)
        /\ Qujprime' := H(SKuj.H(IDu.Ss).Dj.Xu.IDj)
	/\ PIDrprime' := xor(Tu, H(PIDr'.H(IDu.Ss).Xu))
%%%Send authentication Reply to NAD
	/\ SND(Qujprime')
%%% ED's acceptance of values b' and Dj for ED by NAD
	/\ request(ED, NAD, dj, Dj')
	/\ request(ED, NAD, bprime, Bbprime)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
%%NAD ROLE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role networkdevice (ED, NAD: agent, SKus: symmetric_key, SND,RCV: channel(dy))  
played_by NAD
def=
	local
		State:nat,
		IDu, PWu, Bu, Aa, Bb, Cu, M,AB, TW: text,
		Lu, Xu, Yu, Fu, Zu, PIDr, Bbprime, Du: text,
		Buj, IDj, Quj, PIDrprime, Qujprime, Dj, Tu, SKuj,Ss, DIDu: text,
		H: hash_func
	const
		sp1,sp2, sp3, a, b,  bprime, dj, cu	: protocol_id
	init
		State := 0
	transition
%%%User Registration Phase
 
	1. State =  0 /\ RCV({IDu.M.TW}_SKus) =|>
%%%% Identity IDu is shared between ED and NAD
	State' := 2 /\  secret({IDu}, sp1, {ED,NAD})
%%%%Password and Biometric  are only know to ED
	/\  secret({PWu,Bu}, sp2, {ED})

%%%%% Computation
	/\ Lu' := H(M.Ss)
	/\ Bb' := new()
	/\ Xu' := H(Lu'.H(Ss.Bb))										
	/\ Yu' := xor(Xu', H(M.TW))
	/\ Zu' := xor(xor(Lu',H(Ss	. Bb)),TW)	
	/\ Fu' := H(H(IDu.TW))	
	/\ PIDr' :={IDu.Ss.Bb}_SKus
	/\ Du' := xor(H(IDu.Ss), H(IDu.TW))
	/\ SND(PIDr'. Du'. Yu'.Fu'.Zu')
%%%%%%%%%% Mutual Authentication
%%% Receive login request Message M1 from ED

	2. State = 2 /\ RCV(PIDr. DIDu. Buj.Cu') =|>
%%%% We decrytp PIDr by using master key of CCS
	State' := 4 /\   PIDr':= IDu.Ss.Bb
	/\ Lu' := xor(xor(xor(Buj,H(H(IDj.Cu'))),H(PIDr.H(IDu.Ss))),H(Ss.Bb))
	/\ Xu' := H(Lu'.H(Ss.Bb))
	/\ DIDu' := H(PIDr'.Xu'.Cu')
	/\ Bbprime' := new()
	/\ Dj' := new()
	/\ PIDrprime' := xor(H(IDu.Ss), H(Ss.Bbprime'))
	/\ Tu' := xor(PIDrprime',H(PIDr'.H(IDu.Ss).Xu'))
	/\ Quj' :=H(H(IDu.Ss).Tu'.Cu'.Dj'.Xu'.IDj)
%%% Send request message M2 to ED publicly
	/\ SND(Quj'.Tu'.Dj') 
%%% Freshly generated Random number b' and Dj
	/\ witness(ED, NAD, dj, Dj')
	/\ witness(ED, NAD, bprime, Bbprime')
%%% Receive request message M3 to ED publicly
	3. State = 4 /\ RCV(Qujprime') =|>	
%%% NAD acceptance of value Cu generated by ED for NAD
	  State' := 6  /\ Cu' := new()	  /\ request(ED, NAD, cu, Cu')
	/\ SKuj' := H(H(IDu.Ss). Cu'. Dj. Xu. IDj)
        /\ Qujprime' := H(SKuj.H(IDu.Ss).Dj.Xu.IDj)
end role 

role session (ED,NAD: agent, SKus: symmetric_key)
def=
	local
		SND1,SND2,RCV1,RCV2: channel(dy)
	composition
		edge (ED, NAD, SKus, SND1, RCV1)
		/\  networkdevice (ED, NAD, SKus, SND2, RCV2)
end role

role environment()
def=
	const ed, nad: agent, skus: symmetric_key,
        h: hash_func, sp1,sp2, sp3, a, b, bprime, dj, cu: protocol_id
	intruder_knowledge = {ed, nad, h}
	composition
	 session(ed, nad, skus) 
	/\ session(i, nad, skus)
	/\ session(ed, i, skus)
end role
goal
        secrecy_of sp1, sp2, sp3
        authentication_on a,cu
        authentication_on b, bprime,dj
end goal
environment()











